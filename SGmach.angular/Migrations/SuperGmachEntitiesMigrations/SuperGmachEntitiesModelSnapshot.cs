// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SGmach.Entity;

namespace SGmach.angular.Migrations.SuperGmachEntitiesMigrations
{
    [DbContext(typeof(SuperGmachEntities))]
    partial class SuperGmachEntitiesModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7");

            modelBuilder.Entity("SGmach.Entity.Models.BankDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Account")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bank")
                        .HasColumnType("TEXT");

                    b.Property<string>("Branch")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("owner")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("SGmach.Entity.Models.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("SGmach.Entity.Models.Credit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CVV")
                        .HasColumnType("TEXT");

                    b.Property<int>("Ciling")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CrdeditOwnerID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Expdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("SGmach.Entity.Models.Deposit", b =>
                {
                    b.Property<int>("DepositId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Form_deposit")
                        .HasColumnType("TEXT");

                    b.Property<string>("FundId")
                        .HasColumnType("TEXT");

                    b.Property<string>("GmachId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<int>("User_in_fundId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DepositId");

                    b.HasIndex("FundId");

                    b.HasIndex("User_in_fundId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("SGmach.Entity.Models.Expenditure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("Purpose")
                        .HasColumnType("TEXT");

                    b.Property<string>("Receives")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusNameStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("Way_of_payment")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StatusNameStatus");

                    b.ToTable("Expenditure");
                });

            modelBuilder.Entity("SGmach.Entity.Models.Fund", b =>
                {
                    b.Property<string>("FundId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Date_create")
                        .HasColumnType("TEXT");

                    b.Property<string>("GmachId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("fund_name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("required_months")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("required_vip")
                        .HasColumnType("INTEGER");

                    b.Property<string>("statusNameStatus")
                        .HasColumnType("TEXT");

                    b.HasKey("FundId");

                    b.HasIndex("statusNameStatus");

                    b.ToTable("Funds");
                });

            modelBuilder.Entity("SGmach.Entity.Models.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("From")
                        .HasColumnType("TEXT");

                    b.Property<string>("GmachId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameStatus")
                        .HasColumnType("TEXT");

                    b.Property<int>("Payment_method")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Remarks")
                        .HasColumnType("TEXT");

                    b.Property<string>("statusNameStatus")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("statusNameStatus");

                    b.ToTable("Incoms");
                });

            modelBuilder.Entity("SGmach.Entity.Models.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EnteryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Management_StatusNameManagement_status")
                        .HasColumnType("TEXT");

                    b.Property<int>("Months")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NameManagement_status")
                        .HasColumnType("TEXT");

                    b.Property<int>("Num_payments")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RepaymentStart")
                        .HasColumnType("TEXT");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("remark")
                        .HasColumnType("TEXT");

                    b.HasKey("LoanId");

                    b.HasIndex("Management_StatusNameManagement_status");

                    b.HasIndex("UserId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("SGmach.Entity.Models.Management_status", b =>
                {
                    b.Property<string>("NameManagement_status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("NameManagement_status");

                    b.ToTable("ManagementStatuses");
                });

            modelBuilder.Entity("SGmach.Entity.Models.Repayment", b =>
                {
                    b.Property<int>("RepaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("LoanId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NameStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusNameStatus")
                        .HasColumnType("TEXT");

                    b.HasKey("RepaymentId");

                    b.HasIndex("LoanId");

                    b.HasIndex("StatusNameStatus");

                    b.ToTable("Repayments");
                });

            modelBuilder.Entity("SGmach.Entity.Models.Status", b =>
                {
                    b.Property<string>("NameStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("NameStatus");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("SGmach.Entity.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GmachId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Manager_permissions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameManagement_status")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameStatus")
                        .HasColumnType("TEXT");

                    b.Property<int>("Scoring")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status_reason")
                        .HasColumnType("TEXT");

                    b.Property<bool>("VIP")
                        .HasColumnType("INTEGER");

                    b.Property<string>("city")
                        .HasColumnType("TEXT");

                    b.Property<int>("collection_date")
                        .HasColumnType("INTEGER");

                    b.Property<string>("email_addres")
                        .HasColumnType("TEXT");

                    b.Property<string>("father_name")
                        .HasColumnType("TEXT");

                    b.Property<string>("firstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("frirnd")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("joining_date")
                        .HasColumnType("TEXT");

                    b.Property<string>("lastname")
                        .HasColumnType("TEXT");

                    b.Property<string>("management_StatusNameManagement_status")
                        .HasColumnType("TEXT");

                    b.Property<int>("num_street")
                        .HasColumnType("INTEGER");

                    b.Property<string>("phon1")
                        .HasColumnType("TEXT");

                    b.Property<string>("phon2")
                        .HasColumnType("TEXT");

                    b.Property<string>("remarks")
                        .HasColumnType("TEXT");

                    b.Property<string>("statusNameStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("street")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("management_StatusNameManagement_status");

                    b.HasIndex("statusNameStatus");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SGmach.Entity.Models.User_in_fund", b =>
                {
                    b.Property<int>("User_in_fundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FundId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FundId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("GmachId")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("balance")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("date_join")
                        .HasColumnType("TEXT");

                    b.HasKey("User_in_fundId");

                    b.HasIndex("FundId1");

                    b.HasIndex("UserId");

                    b.ToTable("UserInFunds");
                });

            modelBuilder.Entity("SGmach.Entity.Models.withdrawing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("FundId")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameStatus")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusNameStatus")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("User_in_fundId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FundId");

                    b.HasIndex("StatusNameStatus");

                    b.HasIndex("UserId");

                    b.HasIndex("User_in_fundId");

                    b.ToTable("Withdrawing");
                });

            modelBuilder.Entity("SGmach.Entity.Models.BankDetails", b =>
                {
                    b.HasOne("SGmach.Entity.Models.User", "User")
                        .WithOne("BankDetails")
                        .HasForeignKey("SGmach.Entity.Models.BankDetails", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SGmach.Entity.Models.Collection", b =>
                {
                    b.HasOne("SGmach.Entity.Models.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SGmach.Entity.Models.Credit", b =>
                {
                    b.HasOne("SGmach.Entity.Models.User", "User")
                        .WithOne("Credit")
                        .HasForeignKey("SGmach.Entity.Models.Credit", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SGmach.Entity.Models.Deposit", b =>
                {
                    b.HasOne("SGmach.Entity.Models.Fund", "Fund")
                        .WithMany("Deposits")
                        .HasForeignKey("FundId");

                    b.HasOne("SGmach.Entity.Models.User_in_fund", "User_In_Fund")
                        .WithMany("Deposits")
                        .HasForeignKey("User_in_fundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SGmach.Entity.Models.Expenditure", b =>
                {
                    b.HasOne("SGmach.Entity.Models.Status", "Status")
                        .WithMany("Expenditures")
                        .HasForeignKey("StatusNameStatus");
                });

            modelBuilder.Entity("SGmach.Entity.Models.Fund", b =>
                {
                    b.HasOne("SGmach.Entity.Models.Status", "status")
                        .WithMany()
                        .HasForeignKey("statusNameStatus");
                });

            modelBuilder.Entity("SGmach.Entity.Models.Income", b =>
                {
                    b.HasOne("SGmach.Entity.Models.Status", "status")
                        .WithMany("Incomes")
                        .HasForeignKey("statusNameStatus");
                });

            modelBuilder.Entity("SGmach.Entity.Models.Loan", b =>
                {
                    b.HasOne("SGmach.Entity.Models.Management_status", "Management_Status")
                        .WithMany("Loans")
                        .HasForeignKey("Management_StatusNameManagement_status");

                    b.HasOne("SGmach.Entity.Models.User", "User")
                        .WithMany("Loans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SGmach.Entity.Models.Repayment", b =>
                {
                    b.HasOne("SGmach.Entity.Models.Loan", "Loan")
                        .WithMany("Repayments")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGmach.Entity.Models.Status", "Status")
                        .WithMany("Repayments")
                        .HasForeignKey("StatusNameStatus");
                });

            modelBuilder.Entity("SGmach.Entity.Models.User", b =>
                {
                    b.HasOne("SGmach.Entity.Models.Management_status", "management_Status")
                        .WithMany("Users")
                        .HasForeignKey("management_StatusNameManagement_status");

                    b.HasOne("SGmach.Entity.Models.Status", "status")
                        .WithMany("Users")
                        .HasForeignKey("statusNameStatus");
                });

            modelBuilder.Entity("SGmach.Entity.Models.User_in_fund", b =>
                {
                    b.HasOne("SGmach.Entity.Models.Fund", "Fund")
                        .WithMany("Users_in_fund")
                        .HasForeignKey("FundId1");

                    b.HasOne("SGmach.Entity.Models.User", "User")
                        .WithMany("users_In_Funds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SGmach.Entity.Models.withdrawing", b =>
                {
                    b.HasOne("SGmach.Entity.Models.Fund", "Fund")
                        .WithMany("Withdrawings")
                        .HasForeignKey("FundId");

                    b.HasOne("SGmach.Entity.Models.Status", "Status")
                        .WithMany("Withdrawings")
                        .HasForeignKey("StatusNameStatus");

                    b.HasOne("SGmach.Entity.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGmach.Entity.Models.User_in_fund", null)
                        .WithMany("Withdrawings")
                        .HasForeignKey("User_in_fundId");
                });
#pragma warning restore 612, 618
        }
    }
}
